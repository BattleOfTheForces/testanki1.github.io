name: Tanki Online Test Server Monitor

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  check-servers:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run server check script
        id: check_script
        run: |
          # --- 配置 ---
          URL_EU_TEMPLATE="https://public-deploy-{i}.test-eu.tankionline.com/browser-public/index.html"
          URL_RU_TEMPLATE="https://client-review-{i}-public.test-ru.tankionline.com/"
          STATE_FILE="server_status.json"
          notifications=()
          new_status_json="{}"
          
          # --- 准备 URL 列表 ---
          urls=()
          for i in {1..10}; do
            urls+=("${URL_EU_TEMPLATE//\{i\}/$i}")
            urls+=("${URL_RU_TEMPLATE//\{i\}/$i}")
          done

          # --- 读取旧状态 ---
          if [ -f "$STATE_FILE" ]; then
            old_status_json=$(cat "$STATE_FILE")
          else
            echo "状态文件 $STATE_FILE 未找到，将创建新文件。"
            old_status_json="{}"
          fi
          
          # --- 循环检测每个 URL ---
          for url in "${urls[@]}"; do
            echo "正在检测: $url"
            
            # 【重要修改】添加 --insecure 和 || true 来处理 SSL 和连接错误
            response=$(curl --insecure --silent --location --write-out "%{http_code}" --max-time 10 "$url" || true)
            http_code="${response: -3}"
            body="${response:0:${#response}-3}"
            
            # 从旧状态文件中获取此 URL 的记录
            old_entry=$(echo "$old_status_json" | jq -r ".[\"$url\"] // \"null\"")
            old_status=$(echo "$old_entry" | jq -r ".status // \"null\"")
            old_hash=$(echo "$old_entry" | jq -r ".hash // \"null\"")
            
            current_hash="null"
            message=""

            if [ "$http_code" -eq 404 ]; then
              # 当前是 404
              if [ "$old_status" != "404" ] && [ "$old_status" != "null" ]; then
                message="服务器已关闭 (404 Not Found)"
                notifications+=("- **$url**: $message")
              fi
              current_status="404"
            else
              # 当前不是 404 (包括连接失败导致 http_code 为空的情况)
              # 只有在请求成功时才计算哈希值
              if [[ "$http_code" =~ ^2[0-9]{2}$ ]]; then # 仅在状态码为 2xx 时计算哈希
                current_hash=$(echo "$body" | sha256sum | awk '{print $1}')
              fi
              current_status="$http_code"

              if [ "$old_status" == "404" ]; then
                message="服务器已开放 (状态: $http_code)"
                notifications+=("- **$url**: $message")
              elif [ "$old_status" != "null" ] && [ "$old_hash" != "null" ] && [ "$current_hash" != "null" ] && [ "$old_hash" != "$current_hash" ]; then
                message="网页代码已更新 (状态: $http_code)"
                notifications+=("- **$url**: $message")
              elif [ "$old_status" == "null" ]; then
                # 首次检测到，也算作一种通知
                message="首次发现服务器 (状态: $http_code)"
                notifications+=("- **$url**: $message")
              fi
            fi

            # 构建新的状态条目
            new_status_json=$(echo "$new_status_json" | jq ". + {\"$url\": {\"status\": \"$current_status\", \"hash\": \"$current_hash\"}}")
          done

          # --- 判断是否有变化并设置输出 ---
          if [ ${#notifications[@]} -gt 0 ]; then
            echo "发现服务器状态变化。"
            notification_body=$(printf "%s\n" "${notifications[@]}")
            echo "has_changes=true" >> $GITHUB_OUTPUT
            EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
            echo "notification_body<<$EOF" >> $GITHUB_OUTPUT
            echo "$notification_body" >> $GITHUB_OUTPUT
            echo "$EOF" >> $GITHUB_OUTPUT
            
            echo "$new_status_json" | jq '.' > "$STATE_FILE"
          else
            echo "所有服务器状态无变化。"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
      # 步骤 3: 如果有变化，则发送邮件
      - name: Send notification email
        if: steps.check_script.outputs.has_changes == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com 
          server_port: 465 
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "Tanki 测试服务器状态更新"
          to: ${{ secrets.MAIL_TO }}
          from: GitHub Actions Monitor <${{ secrets.MAIL_USERNAME }}>
          body: |
            你好，
            
            检测到以下 Tanki Online 测试服务器状态发生变化：
            
            ${{ steps.check_script.outputs.notification_body }}
            
            此邮件由 GitHub Actions 自动发送。

      # 步骤 4: 如果有变化，则提交状态文件
      - name: Commit status file
        if: steps.check_script.outputs.has_changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add server_status.json
          if git diff --staged --quiet; then
            echo "状态文件无变化，无需提交。"
          else
            git commit -m "chore: 更新服务器状态文件"
            git push
          fi
